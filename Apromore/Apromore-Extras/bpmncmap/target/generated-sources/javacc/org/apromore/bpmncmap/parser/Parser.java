/* Generated By:JavaCC: Do not edit this line. Parser.java */
package org.apromore.bpmncmap.parser;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import net.sf.javabdd.BDD;
import net.sf.javabdd.BDDFactory;
import net.sf.javabdd.JFactory;

/** Parse propositional logic of configuration conditions, based on BDDC's format. */
public class Parser implements ParserConstants {

  private static final int MAX_VARIABLES = 100;

  private BDDFactory factory = null;
  private Map<String, Integer> variableMap = new HashMap<String, Integer>();
  private int nextVariableIndex = 0;

  public void init() {
    factory = JFactory.init(1000, 1000);
    factory.setVarNum(MAX_VARIABLES);
  }

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Parser parser = new Parser(System.in);
    parser.init();
    parser.Start();
  }

  /**
   * @param propositions  a collection of propositions
   * @return whether exactly one of the <var>propositions</var> is true
   */
  public BDD exactlyOne(Collection<BDD> propositions) {
    BDD sum = factory.zero();
    for (BDD x: propositions) {
      BDD product = factory.one();
      for (BDD y: propositions) {
          product = product.and((x == y) ? y : y.not());
      }  // at the end of this loop, product is the proposition that only x is true
      sum = sum.orWith(product);
    }
    return sum;
  }

  public BDD findVariable(final String s) {
    if (variableMap.containsKey(s)) {
      return factory.ithVar(variableMap.get(s));
    } else {
      BDD newVariable = factory.ithVar(nextVariableIndex);
      variableMap.put(s, nextVariableIndex);
      nextVariableIndex++;
      assert nextVariableIndex < MAX_VARIABLES : "Exceeded allocated number of variables";
      return newVariable;
    }
  }

  public int findVariableIndex(final String s, boolean create) {
    if (variableMap.containsKey(s)) {
      return variableMap.get(s);
    } else if (create) {
      BDD newVariable = factory.ithVar(nextVariableIndex);
      variableMap.put(s, nextVariableIndex);
      nextVariableIndex++;
      assert nextVariableIndex < 10 : "Exceeded allocated number of variables";
      return nextVariableIndex - 1;
    } else {
      return -1;
    }
  }

  public BDDFactory getFactory() {
    return factory;
  }

  public Map<String, Integer> getVariableMap() {
    return variableMap;
  }

  /**
   * N-ary functions on {@link BDD}s.
   */
  interface NaryFunction {
    BDD eval(final List<BDD> parameters);
  }

  class ExactlyOneFunction implements NaryFunction {
    public BDD eval(final List<BDD> parameterList) {
      return exactlyOne(parameterList);
    }
  }

  class NorFunction implements NaryFunction {
    public BDD eval(final List<BDD> parameterList) {
      return fold(factory.or, parameterList, factory.zero()).not();
    };
  }

  class XorFunction implements NaryFunction {
    public BDD eval(final List<BDD> parameterList) {
      assert parameterList.size() == 2;
      return parameterList.get(0).xor(parameterList.get(1));
    };
  }

  private static BDD fold(BDDFactory.BDDOp op, Collection<BDD> list, BDD kernel) {
    BDD x = kernel;
    for (BDD y : list) {
      x.applyWith(y, op);
    }
    return x;
  }

/* Grammar */

/** Root production. */
  final public void Start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOR:
      case XOR:
      case VARIABLE:
      case NOT:
      case TRUE:
      case FALSE:
      case OPEN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Command();
    }
    jj_consume_token(0);
  }

  final public void Command() throws ParseException {
  BDD expression;
    expression = AdditiveExpression();
    jj_consume_token(COMMAND_SEPARATOR);

  }

  final public BDD AdditiveExpression() throws ParseException {
  BDD lhs, rhs = null;
    lhs = MultiplicativeExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      rhs = AdditiveExpression();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
                                                                      {if (true) return rhs == null ? lhs : lhs.or(rhs);}
    throw new Error("Missing return statement in function");
  }

  final public BDD MultiplicativeExpression() throws ParseException {
  BDD lhs, rhs = null;
  BDDFactory.BDDOp op = null;
    lhs = UnaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case IFF:
    case IMPLIES:
    case IMPLIED_BY:
      op = MultiplicativeOperator();
      rhs = MultiplicativeExpression();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
                                                                                          {if (true) return rhs == null ? lhs : lhs.apply(rhs, op);}
    throw new Error("Missing return statement in function");
  }

  final public BDDFactory.BDDOp MultiplicativeOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
          {if (true) return BDDFactory.and;}
      break;
    case IFF:
      jj_consume_token(IFF);
          {if (true) return BDDFactory.biimp;}
      break;
    case IMPLIES:
      jj_consume_token(IMPLIES);
              {if (true) return BDDFactory.imp;}
      break;
    case IMPLIED_BY:
      jj_consume_token(IMPLIED_BY);
                 {if (true) return BDDFactory.invimp;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public BDD UnaryExpression() throws ParseException {
  BDD expression;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      expression = UnaryExpression();
                                       {if (true) return expression.not();}
      break;
    case NOR:
    case XOR:
    case VARIABLE:
    case TRUE:
    case FALSE:
    case OPEN:
      expression = Term();
                      {if (true) return expression;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public BDD Term() throws ParseException {
  BDD          expression;
  NaryFunction f;
  List<BDD>    list;
  Token        token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
           {if (true) return factory.one();}
      break;
    case FALSE:
      jj_consume_token(FALSE);
            {if (true) return factory.zero();}
      break;
    case NOR:
    case XOR:
      f = Function();
      list = ParameterList();
                                      {if (true) return f.eval(list);}
      break;
    case VARIABLE:
      token = jj_consume_token(VARIABLE);
                     {if (true) return findVariable(token.toString());}
      break;
    case OPEN:
      jj_consume_token(OPEN);
      expression = AdditiveExpression();
      jj_consume_token(CLOSE);
                                                   {if (true) return expression;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NaryFunction Function() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOR:
      jj_consume_token(NOR);
          {if (true) return new NorFunction();}
      break;
    case XOR:
      jj_consume_token(XOR);
          {if (true) return new ExactlyOneFunction();}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<BDD> ParameterList() throws ParseException {
  BDD head;
  List<BDD> tail;
    jj_consume_token(OPEN);
    head = AdditiveExpression();
    tail = AdditionalParameters();
                                                                 List list = new ArrayList<BDD>();
                                                                 list.add(head);
                                                                 list.addAll(tail);
                                                                 {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<BDD> AdditionalParameters() throws ParseException {
  BDD head;
  List<BDD> tail;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      head = AdditiveExpression();
      tail = AdditionalParameters();
                                                                  List<BDD> list = new ArrayList<BDD>();
                                                                  list.add(head);
                                                                  list.addAll(tail);
                                                                  {if (true) return list;}
      break;
    case CLOSE:
      jj_consume_token(CLOSE);
            {if (true) return Collections.<BDD>emptyList();}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1c1e0,0x400,0x3a00,0x3a00,0x1c1e0,0x1c0e0,0x60,0x60000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
